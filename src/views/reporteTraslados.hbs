<style>
    ul{
        list-style: none;
    }
        /* Estilos básicos para la lista desplegable */
        .dropdown {
            position: relative;
            display: inline-block;
            width: 100%;
        }
        .dropdown-input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 16px;
        }
        .dropdown-list {
            position: absolute;
            z-index: 1000;
            width: 100%;
            max-height: 200px;
            overflow-y: auto;
            background-color: #fff;
            border: 1px solid #ccc;
            border-top: none;
            border-radius: 0 0 4px 4px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            display: none;
        }
        .dropdown-list-item {
            padding: 0px;
            cursor: pointer;
        }
        .dropdown-list-item:hover {
            background-color: #f2f2f2;
        }
    </style>

<form action="/reporteTraslados/add" method="POST">
<div class="card">
    <div class="card-header">
        <h3>Datos generales de traslado</h3>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12 mb-1">
                <label for="cuadrilla">Fecha de traslado</label>
                <input class="form-control" type="date" name="fechaTraslado" placeholder="Ingrese el código de cuadrilla">
            </div>
            <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12 mb-1">
                <label for="cuadrilla">De sede</label>
                <input class="form-control" type="text" name="sedeOrigen" placeholder="Ingrese sede origen">
            </div>
            <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12 mb-1">
                <label for="cuadrilla">Hacia sede</label>
                <input class="form-control" type="text" name="sedeDestino" placeholder="Ingrese sede destino">
            </div>
            <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12 mb-1">
                <label for="cuadrilla">Entregado por</label>
                <input class="form-control" type="text" name="empleadoEntrega" placeholder="Ingrese nombre completo">
            </div>
            <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12 mb-1">
                <label for="cuadrilla">Recibido por</label>
                <input class="form-control" type="text" name="empleadoRecibe" placeholder="Ingrese nombre completo">
            </div>
            <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12 mb-1">
                <label for="cuadrilla">Agregar nota</label>
                <textarea class="form-control" type="text" name="nota" placeholder="Ingrese nota"></textarea>
            </div>
        </div>
    </div>
</div>
<div class="card">
    <div class="card-header">
        <h3>Insumos a trasladar</h3>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                <label for="insumos">Seleccione un insumo:</label>
                <div class="dropdown">
                    <input id="insumos-input" class="dropdown-input form-control" type="text" placeholder="Buscar insumo...">
                    <ul id="insumos-list" class="dropdown-list">
                        {{#each insumosI}}
                            <li class="dropdown-list-item" data-id="{{codigo}}-{{insumo}}-{{unidad}}">{{codigo}}-{{insumo}}-{{unidad}}</li>
                        {{/each}}
                    </ul>
                </div>
                <input type="hidden" id="insumos" name="insumos">
            </div>
            <!-- Dropdown para cantidades -->
            <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12 mb-1">
                <label for="cantidad">Seleccione cantidad:</label>
                <div class="dropdown">
                    <input id="cantidad-input" class="dropdown-input form-control" type="text" placeholder="Buscar cantidad..." readonly>
                    <ul id="cantidad-list" class="dropdown-list">
                                    {{#each cantidades}}
                                <li class="dropdown-list-item" data-id="{{cantidad}}">{{cantidad}}</li>
                               {{/each}}
                    </ul>
                </div>
                <input type="hidden" id="cantidad" name="cantidad">
            </div>

            <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12 mt-1">
                <label for="cuadrilla"></label>
                <button type="button" id="add-inputs-btn" class="btn btn-primary mt-4">Agregar insumo</button>
            </div>
        </div>
        <p>Listado de insumos agregados</p>
        <div class="row mt-3"  id="inputs-container">   

        </div>
    </div>
</div>
    <button class="btn btn-warning mt-4 mb-5">Guardar</button>
</form>

<script>
    document.addEventListener('DOMContentLoaded', function() {
    const insumosInput = document.getElementById('insumos-input');
    const insumosList = document.getElementById('insumos-list');
    const insumoSeleccionadoInput = document.getElementById('insumos');
    const cantidadInput = document.getElementById('cantidad-input');
    const cantidadList = document.getElementById('cantidad-list');
    const cantidadInputHidden = document.getElementById('cantidad');
    const usoInputHidden = document.getElementById('uso');

    // Rango de números enteros para el dropdown de cantidades
    const enteros = Array.from({ length: 11 }, (_, i) => i ); // Números del 1 al 100
    // Números fraccionarios para el dropdown de cantidades
    const fraccionarios = [];
    for (let i = 0; i <= 10; i++) {
        fraccionarios.push(i + 0.5); // Añadir números con fracciones .5
        fraccionarios.push(i + 0.25); // Añadir números con fracciones .25
        fraccionarios.push(i + 0.75); // Añadir números con fracciones .75
        fraccionarios.push(i + 0.333); // Añadir números con fracciones .333
        fraccionarios.push(i + 0.666); // Añadir números con fracciones .666
    }
function formatFraction(value) {
    // Si el valor es un número entero, devuélvelo como está
    if (Number.isInteger(value)) {
        return value;
    }

    // Convierte valores como 1.5 a 1 1/2
    const integerPart = Math.floor(value);
    const fractionalPart = value - integerPart;

    if (fractionalPart === 0.5) {
        return `${integerPart} 1/2`;
    } else if (fractionalPart === 0.25) {
        return `${integerPart} 1/4`;
    } else if (fractionalPart === 0.75) {
        return `${integerPart} 3/4`;
    } 

    // Retorna el número decimal si no coincide con las fracciones comunes
    return value;
}

function fillCantidadDropdown(isGalon) {
        cantidadList.innerHTML = '';
        const cantidades = isGalon ? [...enteros, ...fraccionarios] : enteros;
        
        cantidades.forEach(cantidad => {
            const li = document.createElement('li');
            li.textContent = formatFraction(cantidad); // Usa la función para formatear la fracción
            li.className = 'dropdown-list-item';
            li.addEventListener('click', function() {
                cantidadInput.value = cantidad;
                cantidadInputHidden.value = cantidad;
                cantidadList.style.display = 'none';
            });
            cantidadList.appendChild(li);
        });
    }

    function updateDropdowns() {
        const insumoSeleccionado = insumoSeleccionadoInput.value;

        if (insumoSeleccionado && (insumoSeleccionado.includes('UNIDAD') || insumoSeleccionado.includes('PAQUETE') || insumoSeleccionado.includes('PANA') || insumoSeleccionado.includes('LIBRA'))) {
            // Mostrar dropdown de cantidades
            cantidadList.style.display = 'block';
            fillCantidadDropdown();
        } else if (insumoSeleccionado && insumoSeleccionado.includes('GALÓN')) {
            // Mostrar dropdown de cantidades con números enteros y fraccionarios
            cantidadList.style.display = 'block';
            fillCantidadDropdown(true);
        } else {
            // Ocultar dropdown de cantidades
            cantidadList.style.display = 'none';
        }
    }

    insumosInput.addEventListener('input', function() {
        const filterValue = this.value.toUpperCase();
        const listItems = insumosList.getElementsByTagName('li');

        for (let i = 0; i < listItems.length; i++) {
            let itemText = listItems[i].textContent || listItems[i].innerText;
            if (itemText.toUpperCase().indexOf(filterValue) > -1) {
                listItems[i].style.display = '';
            } else {
                listItems[i].style.display = 'none';
            }
        }
    });

    insumosList.addEventListener('click', function(event) {
        const target = event.target;
        if (target.tagName === 'LI') {
            const insumoId = target.getAttribute('data-id');
            const insumoNombre = target.textContent || target.innerText;

            insumosInput.value = insumoNombre;
            insumoSeleccionadoInput.value = insumoId;

            // Ocultar la lista desplegable después de seleccionar
            insumosList.style.display = 'none';

            // Actualizar el dropdown de cantidades
            updateDropdowns();
        }
    });

    insumosInput.addEventListener('focus', function() {
        insumosList.style.display = 'block';
    });

    document.addEventListener('click', function(event) {
        if (!insumosInput.contains(event.target)) {
            insumosList.style.display = 'none';
        }
        if (!cantidadInput.contains(event.target)) {
            cantidadList.style.display = 'none';
        }
    });

    // Manejo de selección de cantidad desde la lista
    cantidadInput.addEventListener('focus', function() {
        if (cantidadList.style.display === 'block') {
            cantidadList.style.display = 'none';
        } else {
            cantidadList.style.display = 'block';
        }
    });
});

</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const addInputsBtn = document.getElementById('add-inputs-btn');
    const inputsContainer = document.getElementById('inputs-container');
    const insumoSeleccionadoInput = document.getElementById('insumos');
    const cantidadDropdown = document.getElementById('cantidad');
    
    const form = document.querySelector('form');

    let inputsData = []; // Array para almacenar datos de inputs dinámicos

    // Función para renderizar los datos actuales de inputsData en el contenedor
    function renderInputsData() {
        inputsContainer.innerHTML = '';
        inputsData.forEach((data, index) => {
            const inputGroup = document.createElement('div');
            inputGroup.classList.add('input-group', 'mb-2');
            inputGroup.setAttribute('data-index', index);

            const input = document.createElement('input');
            input.setAttribute('type', 'text');
            input.setAttribute('name', `input-${index}`);
            input.value = `${data.insumo} | ${data.cantidad}`;
            input.classList.add('form-control');

            // Crear botón de eliminación
            const removeBtn = document.createElement('button');
            removeBtn.textContent = 'Eliminar';
            removeBtn.classList.add('btn', 'btn-danger', 'ml-2');
            removeBtn.addEventListener('click', function() {
                removeInput(index); // Llama a la función para eliminar el input
            });

            inputGroup.appendChild(input);
            inputGroup.appendChild(removeBtn);
            inputsContainer.appendChild(inputGroup);
        });
    }

    // Función para eliminar un input por índice
    function removeInput(index) {
        inputsData = inputsData.filter((_, i) => i !== index); // Elimina el índice del array
        renderInputsData(); // Vuelve a renderizar los inputs
    }

    addInputsBtn.addEventListener('click', function() {
        const insumoSeleccionado = insumoSeleccionadoInput.value;
        const cantidadSeleccionada = cantidadDropdown.value;

        const newInputData = {
            insumo: insumoSeleccionado,
            cantidad: cantidadSeleccionada,
        };

        inputsData.push(newInputData); // Agregar el nuevo inputData al array
        renderInputsData(); // Renderizar los inputs actualizados
    });

    form.addEventListener('submit', async function(event) {
        event.preventDefault(); // Evitar el envío normal del formulario

        const formData = new FormData(form);
        const formDataObj = Object.fromEntries(formData.entries());

        formDataObj.inputsData = inputsData;

        try {
            const response = await fetch('/reporteTraslados/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formDataObj)
            });

            if (!response.ok) {
                throw new Error('Error al guardar en el servidor');
            }

            Swal.fire({
                icon: 'success',
                title: 'Guardado exitosamente',
                showConfirmButton: false,
                timer: 1500
            });

            setTimeout(() => {
                location.reload();
                window.location.href = '/';
            }, 1000);
        } catch (error) {
            console.error('Error al enviar datos al servidor:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error al guardar',
                text: 'Ocurrió un problema al guardar los datos. Por favor, inténtalo de nuevo.'
            });
        }
    });
});
</script>