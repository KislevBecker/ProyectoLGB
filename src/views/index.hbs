<style>
        /* Estilos básicos para la lista desplegable */
        .dropdown {
            position: relative;
            display: inline-block;
            width: 100%;
        }
        .dropdown-input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 16px;
        }
        .dropdown-list {
            position: absolute;
            z-index: 1000;
            width: 100%;
            max-height: 200px;
            overflow-y: auto;
            background-color: #fff;
            border: 1px solid #ccc;
            border-top: none;
            border-radius: 0 0 4px 4px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            display: none;
        }
        .dropdown-list-item {
            padding: 10px;
            cursor: pointer;
        }
        .dropdown-list-item:hover {
            background-color: #f2f2f2;
        }
    </style>

<form action="/tasks/add" method="POST">
<div class="card">
    <div class="card-header">
        <h3>Datos de quien ingresa la requisa</h3>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 mb-1">
                <labell for="cuadrilla">Ingrese cuadrilla</labell>
                <input class="form-control" type="text" name="cuadrilla" placeholder="Ingrese el código de cuadrilla">
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 mb-1">
                <labell for="cuadrilla">Quién ingresa la información</labell>
                <input class="form-control" type="text" name="empleado" placeholder="Ingrese su nombre completo">
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 mb-1">
                <labell for="cuadrilla">Ingrese el sitio</labell>
                <input class="form-control" type="text" name="sitio" placeholder="Ingrese el nombre del sitio">
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 mb-1">
                <labell for="cuadrilla">Ingrese RDA</labell>
                <input class="form-control" type="text" name="rda" placeholder="Ingrese el RDA">
            </div>
        </div>
    </div>
</div>
<div class="card">
    <div class="card-header">
        <h3>Insumos a reportar</h3>
    </div>
    <div class="card-body">
        <div class="row">
            {{!-- <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12">
                <label for="insumos">Seleccione un insumo:</label>
                <select name="insumos" id="insumos" class="form-control">
                    <option>seleccione</option>
                    {{#each insumosI}}
                    <option value="{{codigo}}-{{insumo}}">{{codigo}}-{{insumo}}</option>
                    {{/each}}
                </select>
            </div> --}}
            <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                <label for="insumos">Seleccione un insumo:</label>
                <div class="dropdown">
                    <input id="insumos-input" class="dropdown-input form-control" type="text" placeholder="Buscar insumo...">
                    <ul id="insumos-list" class="dropdown-list">
                        {{#each insumosI}}
                            <li class="dropdown-list-item" data-id="{{codigo}}-{{insumo}}">{{codigo}}-{{insumo}}</li>
                        {{/each}}
                    </ul>
                </div>
                <input type="hidden" id="insumos" name="insumos">
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12">
                <label for="insumos">Seleccione la cantidad:</label>
                <select name="cantidad" id="cantidad" class="form-control">
                    <option>seleccione</option>
                        {{#each cantidades}}
                    <option >{{cantidad}}</option>
                   {{/each}}
                </select>
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12">
                <label for="insumos">Seleccione unidad:</label>
                <select id="unidad" name="unidad" class="form-control">
                      <option>seleccione</option>
                           {{#each unidades}}
                    <option >{{unidad}}</option>
                   {{/each}}
                </select>
            </div>
                
            <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12">
                <label for="cuadrilla"></label>
                <button type="button" id="add-inputs-btn" class="btn btn-primary mt-4">Agregar insumo</button>
            </div>
        </div>
        <p>Listado de insumos agregados</p>
        <div class="row mt-3"  id="inputs-container">   

        </div>
    </div>
</div>
    <button class="btn btn-warning mt-4 mb-5">Guardar</button>
</form>

<!-- --------------------------------------BOOTSTRAP JS----------------------------------------------------------- -->

<!-- index.hbs -->

<script>
        document.addEventListener('DOMContentLoaded', function() {
            // Filtrado de insumos al escribir en el input
            const insumosInput = document.getElementById('insumos-input');
            const insumosList = document.getElementById('insumos-list');
            const insumoSeleccionadoInput = document.getElementById('insumos');

            insumosInput.addEventListener('input', function() {
                const filterValue = this.value.toUpperCase();
                const listItems = insumosList.getElementsByTagName('li');

                for (let i = 0; i < listItems.length; i++) {
                    let itemText = listItems[i].textContent || listItems[i].innerText;
                    if (itemText.toUpperCase().indexOf(filterValue) > -1) {
                        listItems[i].style.display = '';
                    } else {
                        listItems[i].style.display = 'none';
                    }
                }
            });

            // Manejo de selección de insumo desde la lista
            insumosList.addEventListener('click', function(event) {
                const target = event.target;
                if (target.tagName === 'LI') {
                    const insumoId = target.getAttribute('data-id');
                    const insumoNombre = target.textContent || target.innerText;

                    insumosInput.value = insumoNombre;
                    insumoSeleccionadoInput.value = insumoId;

                    // Ocultar la lista desplegable después de seleccionar
                    insumosList.style.display = 'none';
                }
            });

            // Mostrar lista desplegable al enfocar el input
            insumosInput.addEventListener('focus', function() {
                insumosList.style.display = 'block';
            });

            // Ocultar lista desplegable al hacer clic fuera de ella
            document.addEventListener('click', function(event) {
                if (!insumosInput.contains(event.target)) {
                    insumosList.style.display = 'none';
                }
            });
        });
    </script>



<script>

document.addEventListener('DOMContentLoaded', function() {
    const addInputsBtn = document.getElementById('add-inputs-btn');
    const inputsContainer = document.getElementById('inputs-container');
    //const insumosDropdown = document.getElementById('insumos');
    const insumoSeleccionadoInput = document.getElementById('insumos');
    const unidadDropdown = document.getElementById('unidad');
    const cantidadDropdown = document.getElementById('cantidad');
    const form = document.querySelector('form');

    let inputsData = []; // Array para almacenar datos de inputs dinámicos

    addInputsBtn.addEventListener('click', function() {
        // Obtener valores seleccionados de los dropdowns
        //const insumoSeleccionado = insumosDropdown.value;
        const insumoSeleccionado = insumoSeleccionadoInput.value;
        const unidadSeleccionada = unidadDropdown.value;
        const cantidadSeleccionada = cantidadDropdown.value;

        // Crear objeto para los datos del nuevo input
        const newInputData = {
            insumo: insumoSeleccionado,
            unidad: unidadSeleccionada,
            cantidad: cantidadSeleccionada
        };

        // Agregar el nuevo objeto al array de inputsData
        inputsData.push(newInputData);

        // Limpiar el contenedor de inputs previos y mostrar los datos actuales
        renderInputsData();
    });

    // Función para renderizar los datos actuales de inputsData en el contenedor
    function renderInputsData() {
        inputsContainer.innerHTML = '';
        inputsData.forEach((data, index) => {
            const inputGroup = document.createElement('div');
            inputGroup.classList.add('input-group');

            const input = document.createElement('input');
            input.setAttribute('type', 'text');
            input.setAttribute('name', `input-${index}`);
            {{!-- input.value = `${data.insumo} | ${data.unidad} | ${data.cantidad}`; --}}
            input.value = `${data.insumo} | ${data.cantidad} | ${data.unidad}`;
            input.classList.add('form-control');

            inputGroup.appendChild(input);
            inputsContainer.appendChild(inputGroup);
        });
    }

    // Evento para manejar el envío del formulario
    form.addEventListener('submit', async function(event) {
        event.preventDefault(); // Evitar el envío normal del formulario

        // Obtener otros datos del formulario si es necesario
        const formData = new FormData(form);
        const formDataObj = Object.fromEntries(formData.entries());

        // Agregar inputsData al objeto formDataObj
        formDataObj.inputsData = inputsData;

        try {
            
            // Enviar los datos al servidor usando fetch
            const response = await fetch('/tasks/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formDataObj)
            });

            if (!response.ok) {
                throw new Error('Error al guardar en el servidor');
            }


            Swal.fire({
                icon: 'success',
                title: 'Guardado exitosamente',
                showConfirmButton: false,
                timer: 1500
            });
            // Esperar un segundo antes de recargar la página
            setTimeout(() => {
                location.reload();
                 window.location.href = '/';
            }, 1000);
        } catch (error) {
            console.error('Error al enviar datos al servidor:', error);
            // Mostrar SweetAlert de error
            Swal.fire({
                icon: 'error',
                title: 'Error al guardar',
                text: 'Ocurrió un problema al guardar los datos. Por favor, inténtalo de nuevo.'
            });
        }
    });
});
</script>